2019-05-06 17:05:01:
{"header":"bumps client","tag":"combine","message_time":{"year":2019,"month":5,"date":6,"hour":17,"minutes":5,"seconds":1,"milliseconds":484},"command":"StartFit","fit_problem":"RUN pip install -U pip","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox5"}
2019-05-06 17:05:04:
{"header":"bumps client","tag":"combine","message_time":{"year":2019,"month":5,"date":6,"hour":17,"minutes":5,"seconds":4,"milliseconds":324},"command":"StartFit","fit_problem":"RUN pip install -U pip","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox6"}
2019-05-06 17:05:22:
{"header":"bumps client","tag":"combine","message_time":{"year":2019,"month":5,"date":6,"hour":17,"minutes":5,"seconds":22,"milliseconds":358},"command":"Delete","params":["156","161"]}
2019-05-06 17:09:02:
{"header":"bumps client","tag":"combine","message_time":{"year":2019,"month":5,"date":6,"hour":17,"minutes":9,"seconds":2,"milliseconds":530},"command":"StartFit","fit_problem":"RUN pip install -U pip","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox6"}
2019-05-06 17:09:04:
{"header":"bumps client","tag":"combine","message_time":{"year":2019,"month":5,"date":6,"hour":17,"minutes":9,"seconds":4,"milliseconds":242},"command":"StartFit","fit_problem":"RUN pip install -U pip","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox7"}
2019-05-06 17:09:05:
{"header":"bumps client","tag":"combine","message_time":{"year":2019,"month":5,"date":6,"hour":17,"minutes":9,"seconds":5,"milliseconds":930},"command":"StartFit","fit_problem":"RUN pip install -U pip","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox8"}
2019-05-06 17:10:15:
{"header":"bumps client","tag":"combine","message_time":{"year":2019,"month":5,"date":6,"hour":17,"minutes":10,"seconds":15,"milliseconds":221},"command":"Delete","params":["162","163"]}
2019-05-07 10:11:53:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":11,"seconds":53,"milliseconds":77},"command":"StartFit","fit_problem":"1111111111111","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-07 10:12:02:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":12,"seconds":2,"milliseconds":224},"command":"StartFit","fit_problem":"1111111111111\n222222222222222","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox3"}
2019-05-07 10:12:09:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":12,"seconds":9,"milliseconds":536},"command":"StartFit","fit_problem":"1111111111111\n222222222222222\n333333333333","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox4"}
2019-05-07 10:12:18:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":12,"seconds":18,"milliseconds":321},"command":"StartFit","fit_problem":"1111111111111\n222222222222222\n333333333333\n444444444444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox5"}
2019-05-07 10:15:26:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":15,"seconds":26,"milliseconds":832},"command":"Delete","params":["162","162","162","162"]}
2019-05-07 10:17:04:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":17,"seconds":4,"milliseconds":869},"command":"StartFit","fit_problem":"1111111111111\n222222222222222\n333333333333\n444444444444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-07 10:17:11:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":17,"seconds":11,"milliseconds":239},"command":"StartFit","fit_problem":"1111111111111\n222222222222222\n333333333333\n444444444444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox3"}
2019-05-07 10:18:09:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":18,"seconds":9,"milliseconds":906},"command":"Delete","params":["162","163"]}
2019-05-07 10:57:38:
{"header":"bumps client","tag":"sail","message_time":{"year":2019,"month":5,"date":7,"hour":10,"minutes":57,"seconds":38,"milliseconds":71},"command":"StartFit","fit_problem":"1111111111111\n222222222222222\n333333333333\n444444444444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-07 14:54:28:
{"header":"bumps client","tag":"leather","message_time":{"year":2019,"month":5,"date":7,"hour":14,"minutes":54,"seconds":28,"milliseconds":493},"command":"Delete","params":[null,null,null,null]}
2019-05-07 14:54:36:
{"header":"bumps client","tag":"leather","message_time":{"year":2019,"month":5,"date":7,"hour":14,"minutes":54,"seconds":35,"milliseconds":989},"command":"Delete","params":[null,null,null,null]}
2019-05-07 15:35:49:
{"header":"bumps client","tag":"rather","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":35,"seconds":36,"milliseconds":664},"command":"StartFit","fit_problem":"Aaaaaaaaaaaaaaaa\naaaaaaaaaaaaaa\nbbbbbbbbbbbbbbbbb","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-07 15:45:28:
{"header":"bumps client","tag":"storm","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":45,"seconds":28,"milliseconds":462},"command":"StartFit","fit_problem":"11111111111\n222222222222\n3333333333333\n44444444444444\n55555555555555","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-07 15:49:21:
{"header":"bumps client","tag":"importance","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":49,"seconds":20,"milliseconds":678},"command":"StartFit","fit_problem":"11111111111\n2222222222222\n33333333333333\n44444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-07 15:49:46:
{"header":"bumps client","tag":"importance","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":49,"seconds":45,"milliseconds":718},"command":"StartFit","fit_problem":"11111111111\n2222222222222\n33333333333333\n44444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox3"}
2019-05-07 15:49:47:
{"header":"bumps client","tag":"importance","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":49,"seconds":47,"milliseconds":357},"command":"StartFit","fit_problem":"11111111111\n2222222222222\n33333333333333\n44444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox4"}
2019-05-07 15:49:48:
{"header":"bumps client","tag":"importance","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":49,"seconds":48,"milliseconds":413},"command":"StartFit","fit_problem":"11111111111\n2222222222222\n33333333333333\n44444444444444","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox5"}
2019-05-07 15:50:17:
{"header":"bumps client","tag":"importance","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":50,"seconds":16,"milliseconds":896},"command":"Delete","params":["166","168"]}
2019-05-07 15:58:17:
{"header":"bumps client","tag":"trunk","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":58,"seconds":17,"milliseconds":387},"command":"StartFit","fit_problem":"111111111111\n222222222222\n333333333333\n44444444444444\nwwwwwwwwwwwwwwww","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-07 15:58:18:
{"header":"bumps client","tag":"trunk","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":58,"seconds":18,"milliseconds":279},"command":"StartFit","fit_problem":"111111111111\n222222222222\n333333333333\n44444444444444\nwwwwwwwwwwwwwwww","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox3"}
2019-05-07 15:58:19:
{"header":"bumps client","tag":"trunk","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":58,"seconds":19,"milliseconds":31},"command":"StartFit","fit_problem":"111111111111\n222222222222\n333333333333\n44444444444444\nwwwwwwwwwwwwwwww","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox4"}
2019-05-07 15:58:20:
{"header":"bumps client","tag":"trunk","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":58,"seconds":20,"milliseconds":119},"command":"StartFit","fit_problem":"111111111111\n222222222222\n333333333333\n44444444444444\nwwwwwwwwwwwwwwww","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox5"}
2019-05-07 15:58:21:
{"header":"bumps client","tag":"trunk","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":58,"seconds":21,"milliseconds":287},"command":"StartFit","fit_problem":"111111111111\n222222222222\n333333333333\n44444444444444\nwwwwwwwwwwwwwwww","problem_file":"","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox6"}
2019-05-07 15:58:32:
{"header":"bumps client","tag":"square","message_time":{"year":2019,"month":5,"date":7,"hour":15,"minutes":58,"seconds":31,"milliseconds":922},"command":"Delete","params":["168","170","172"]}
2019-05-10 15:08:47:
{"header":"bumps client","tag":"might","message_time":{"year":2019,"month":5,"date":10,"hour":15,"minutes":8,"seconds":47,"milliseconds":444},"command":"StartFit","fit_problem":"# Fitting a curve\n# ===============\n#\n# Fitting a curve to a data set and getting uncertainties on the\n# parameters was the main reason that bumps was created, so it\n# should be very easy to do.  Let's see if it is.\n#\n# First let's import the standard names:\n\nfrom bumps.names import *\n\n# Next we need some data.  The x values represent the independent variable,\n# and the y values represent the value measured for condition x.  In this\n# case x is 1-D, but it could be a sequence of tuples instead.  We also\n# need the uncertainty on each measurement if we want to get a meaningful\n# uncertainty on the fitted parameters.\n\nx = [1,2,3,4,5,6]\ny = [2.1,4.0,6.3,8.03,9.6,11.9]\ndy = [0.05,0.05,0.2,0.05,0.2,0.2]\n\n# Instead of using lists we could have loaded the data from a\n# three-column text file using:\n#\n# .. parsed-literal::\n#\n#    data = np.loadtxt(\"data.txt\").T\n#    x,y,dy = data[0,:], data[1,:], data[2,:]\n#\n# The variations are endless --- cleaning the data so that it is\n# in a fit state to model is often the hardest part in the analysis.\n\n# We now define the function we want to fit.  The first argument\n# to the function names the independent variable, and the remaining\n# arguments are the fittable parameters.  The parameter arguments can\n# use a bare name, or they can use name=value to indicate the default\n# value for each parameter.  Our function defines a straight like of\n# slope $m$ with intercept $b$ defaulting to 0.\n\ndef line(x, m, b=0):\n    return m*x + b\n\n# We can build a curve fitting object from our function and our data.\n# This assumes that the measurement uncertainty is normally\n# distributed, with a 1-\\ $\\sigma$ confidence interval *dy* for each point.\n# We specify initial values for $m$ and $b$ when we define the\n# model, and then constrain the fit to $m \\in [0,4]$ # and $b \\in [-5,5]$\n# with the parameter :meth:`range <bumps.parameter.Parameter.range>` method.\n\nM = Curve(line,x,y,dy,m=2,b=2)\nM.m.range(0,4)\nM.b.range(-5,5)\n\n# Every model file ends with a problem definition including a\n# list of all models and datasets which are to be fitted.\n\nproblem = FitProblem(M)\n\n# The complete model file :download:`curve.py <curve.py>` looks as follows:\n#\n# .. literalinclude:: curve.py\n#\n# We can now load and run the fit:\n#\n# .. parsed-literal::\n#\n#    $ bumps.py curve.py --fit=newton --steps=100 --store=T1\n#\n# The ``--fit=newton`` option says to use the quasi-newton optimizer for\n# not more than 100 steps.  The ``--store=T1`` option says to store the\n# initial model, the fit results and any monitoring information in the\n# directory T1.\n#\n# As the fit progresses, we are shown an iteration number and a cost\n# value.  The cost value is approximately the normalized $\\chi^2_N$.\n# The value in parentheses is like the uncertainty in $\\chi^2_N$, in\n# that a 1-\\ $\\sigma$ change in parameter values should increase\n# $\\chi^2_N$ by that amount.\n#\n# Here is the resulting fit:\n#\n# .. plot::\n#\n#    from sitedoc import fit_model\n#    fit_model('curve.py')\n#\n# All is well: Normalized $\\chi^2_N$ is close to 1 and the line goes nicely\n# through the data.","problem_file":"C:\\fakepath\\curve.py","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox2"}
2019-05-10 15:09:04:
{"header":"bumps client","tag":"might","message_time":{"year":2019,"month":5,"date":10,"hour":15,"minutes":9,"seconds":4,"milliseconds":302},"command":"StartFit","fit_problem":"# Fitting a curve\n# ===============\n#\n# Fitting a curve to a data set and getting uncertainties on the\n# parameters was the main reason that bumps was created, so it\n# should be very easy to do.  Let's see if it is.\n#\n# First let's import the standard names:\n\nfrom bumps.names import *\n\n# Next we need some data.  The x values represent the independent variable,\n# and the y values represent the value measured for condition x.  In this\n# case x is 1-D, but it could be a sequence of tuples instead.  We also\n# need the uncertainty on each measurement if we want to get a meaningful\n# uncertainty on the fitted parameters.\n\nx = [1,2,3,4,5,6]\ny = [2.1,4.0,6.3,8.03,9.6,11.9]\ndy = [0.05,0.05,0.2,0.05,0.2,0.2]\n\n# Instead of using lists we could have loaded the data from a\n# three-column text file using:\n#\n# .. parsed-literal::\n#\n#    data = np.loadtxt(\"data.txt\").T\n#    x,y,dy = data[0,:], data[1,:], data[2,:]\n#\n# The variations are endless --- cleaning the data so that it is\n# in a fit state to model is often the hardest part in the analysis.\n\n# We now define the function we want to fit.  The first argument\n# to the function names the independent variable, and the remaining\n# arguments are the fittable parameters.  The parameter arguments can\n# use a bare name, or they can use name=value to indicate the default\n# value for each parameter.  Our function defines a straight like of\n# slope $m$ with intercept $b$ defaulting to 0.\n\ndef line(x, m, b=0):\n    return m*x + b\n\n# We can build a curve fitting object from our function and our data.\n# This assumes that the measurement uncertainty is normally\n# distributed, with a 1-\\ $\\sigma$ confidence interval *dy* for each point.\n# We specify initial values for $m$ and $b$ when we define the\n# model, and then constrain the fit to $m \\in [0,4]$ # and $b \\in [-5,5]$\n# with the parameter :meth:`range <bumps.parameter.Parameter.range>` method.\n\nM = Curve(line,x,y,dy,m=2,b=2)\nM.m.range(0,4)\nM.b.range(-5,5)\n\n# Every model file ends with a problem definition including a\n# list of all models and datasets which are to be fitted.\n\nproblem = FitProblem(M)\n\n# The complete model file :download:`curve.py <curve.py>` looks as follows:\n#\n# .. literalinclude:: curve.py\n#\n# We can now load and run the fit:\n#\n# .. parsed-literal::\n#\n#    $ bumps.py curve.py --fit=newton --steps=100 --store=T1\n#\n# The ``--fit=newton`` option says to use the quasi-newton optimizer for\n# not more than 100 steps.  The ``--store=T1`` option says to store the\n# initial model, the fit results and any monitoring information in the\n# directory T1.\n#\n# As the fit progresses, we are shown an iteration number and a cost\n# value.  The cost value is approximately the normalized $\\chi^2_N$.\n# The value in parentheses is like the uncertainty in $\\chi^2_N$, in\n# that a 1-\\ $\\sigma$ change in parameter values should increase\n# $\\chi^2_N$ by that amount.\n#\n# Here is the resulting fit:\n#\n# .. plot::\n#\n#    from sitedoc import fit_model\n#    fit_model('curve.py')\n#\n# All is well: Normalized $\\chi^2_N$ is close to 1 and the line goes nicely\n# through the data.","problem_file":"C:\\fakepath\\curve.py","params":{"algorithm":"rpg","steps":"100","burns":"100"},"multi_processing":"none","row_id":"cbox3"}
2019-05-10 15:09:11:
{"header":"bumps client","tag":"might","message_time":{"year":2019,"month":5,"date":10,"hour":15,"minutes":9,"seconds":11,"milliseconds":18},"command":"Delete","params":["172"]}
